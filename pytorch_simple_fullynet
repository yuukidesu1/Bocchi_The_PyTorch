# Imports
import torch
import torch.nn as nn
import torch.optim as optim                    # 导入PyTorch中的optim模块，这个模块包含了各种优化器，例如SGD、Adam等
import torch.nn.functional as F                # 导入function模块，这个模块包含了一些不带可学习参数的函数，如激活函数和损失函数等。
from torch.utils.data import DataLoader        # 导入DataLoader模块，用于加载数据，支持批量记载、乱序加载等。
import torchvision.datasets as datasets        # 导入datasets模块，这个模块包含了各种常用的数据集，如MNIST、CIFAR-10等。
import torchvision.transforms as transforms    # 导入transforms模块，这个模块用于对数据进行预处理，如图像的归一化、随机裁剪等。

# Create Fully Connected Network
class NN(nn.Module):                                # 定义一个神经网络模型类 NN
    def __init__(self, input_size, num_classes):    # 初始化函数，传入输入特征向量的维度和输出类别的数量
        super(NN, self).__init__()                  # 调用父类的初始化函数
        self.fc1 = nn.Linear(input_size, 50)        # 定义第一个全连接层，输入维度为 input_size，输出维度为 50
        self.fc2 = nn.Linear(50, num_classes)       # 定义第二个全连接层，输入维度为 50，输出维度为 num_classes

    def forward(self, x):
        x = F.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# model = NN(784, 10)
# x = torch.rand(64,784)
# print(model(x).shape)

# Set device
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Hyperparameters
input_size = 784
num_classes = 10
learning_rate = 0.001
batch_size = 64
num_epochs = 1

# Load Data
train_dataset = datasets.MNIST(root='dataset/', train=True, transform=transforms.ToTensor(), download=True)
train_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)
test_dataset = datasets.MNIST(root='dataset/', train=False, transform=transforms.ToTensor(), download=True)
test_loader = DataLoader(dataset=train_dataset, batch_size=batch_size, shuffle=True)

# Initialize network 神经网络模型参数初始化
model = NN(input_size=input_size, num_classes=num_classes).to(device)

# Loss and optimizer
criterion = nn.CrossEntropyLoss()                                # 定义交叉熵损失函数
optimizer = optim.Adam(model.parameters(), lr=learning_rate)     # 定义优化器，使用Adam算法，学习率为learning_rate，优化的参数是model的所有可学习参数

# Train Network

for epoch in range(num_epochs):
    for batch_idx, (data, targets) in enumerate(train_loader):
        data = data.to(device=device)
        targets = targets.to(device=device)

        # print(data.shape)

        # Get to correct shape
        data = data.reshape(data.shape[0], -1)

        # forward
        scores = model(data)
        loss = criterion(scores, targets)

        # backward
        optimizer.zero_grad()
        loss.backward()

        # gradient descent or adam stop
        optimizer.step()

# Check accuracy on training & test to see how good our model

def check_accuracy(loader, model):
    if loader.dataset.train:
        print("Checking accuracy on training data")
    else:
        print("Checking accuracy on test data")

    num_correct = 0
    num_samples = 0
    model.eval()

    with torch.no_grad():
        for x, y in loader:
            x = x.to(device=device)
            y = y.to(device=device)
            x = x.reshape(x.shape[0], -1)

            scores = model(x)
            _, predictions = scores.max(1)
            num_correct += (predictions == y).sum()
            num_samples += predictions.size(0)

        print(f'Got {num_correct}/{num_samples} with accuracy {float(num_correct)/float(num_samples)*100:.2f}')

    model.train()
    return acc

check_accuracy(train_loader, model)
check_accuracy(test_loader, model)

